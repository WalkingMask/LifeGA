GA with a life

ref
https://www.sist.ac.jp/~suganuma/kougi/other_lecture/SE/opt/GA/GA.htm
http://ap.kakoku.net

64bitナップザック問題をGAで解く
processingでグラフィカルに世代交代を見る
個体評価に「寿命」を使う
generationによる変異が少し緩やかになる感じ
慣性項のような
思いついたがままにいろいろなアルゴリズムを打ち込んでいく
レゴブロックを好きに組み立てる感じで作る

GUI
 600*400のようなドット行列を考える
 どの群をどこに表示するかは群番号によって決定する
 ドットの色は各パラメータをRGBに割り当てる
  R: 群番号
  G: 最大適応度
  B: 平均適応度
  のような
 アルファ値でリソースを表す
 背景は白か黒

初期化
 プログラムの初めに行う
 全個体数
  数を制約はしない
  計算速度が異常に遅くなるような数にならないように消滅をコントロールする
  個体数に応じて大量絶滅や流行が起こる確率を上げるなど
 初期集団の生成
  生成する群の数を乱択し生成する
   少ないほど確率が大きい
   ただし2以上
  群番号をランダムに割り振る
  生成した個体群それぞれにオスメスを1対ずつ生成する
   染色体は完全にランダム

個体
 ビット列で表現される遺伝子型の染色体を持つ
 染色体
  1つの遺伝子(=ビット)が1つのアイテムの有無を表す
  2つの個体の染色体をANDで計算したものを個体差という
  個体差が大きい(ANDの値が小さい=共通遺伝子が少ない)ほど相性がいいとする
 表現型として総重量と総価値を持つ
 適応度は制限重量と総重量との差分と価値の高さ
  総重量が制限重量より大きくても個体として成立はする
  ただし超過重量分に大きなペナルティを課す
  どれくらい？
 寿命を持つ
 寿命
  適応度を寿命のように扱う
  個体が生成されると適応度から寿命が生成される
  1gen進むごとに各個体の寿命が1減る
  寿命が0になるとその個体は消滅する
 性別を持つ
 性別
  オス:1
  メス:0
 個体番号を持つ
 個体番号
  これをもとに交配相手のマッチングが起こる
  個体番号は基本的に発生順
  空き個体番号リスト
   消滅した個体の個体番号はここにいれる
   新しい個体は先にこちらのリストを見る
   リストに空き個体番号があればそれを再利用する
   個体番号を利用する場合は同じ流れで
 属する個体群の群番号を持つ
  群移動などの時に使う
 個体の交配
  1genごとに全集団の出会いを乱択
  出会い
   乱数を1対生成してその数に応じた個体ペアに以下の処理を行う
    同性であれば何もしない
    異性であれば適応度の相性によって確率的に交配するかを決定する
  交配
   交配が決定したら生成する新個体の数を乱択する
     属する群のリソースと個体数の比に応じて発生数ごとの確率が変動
   新個体は親の染色体を用いた交叉と突然変異によって生成される
   交配したメスがオス側の群に移動する
   低確率でオスがメス側の群に移動する
   低確率で2体で新しい群を作る
   交配した個体対は継続的に一定の周期で新個体を生成する
    3genごとにとか
    ただし個体対の寿命によって確率低下していく
    新個体が生成された数によっても低下する
   個体対の変更
    すでに個体対をなしている個体が他の個体と新たな個体対を作る
    新たな出会いで他の個体とマッチングされた場合に起きる
    マッチングされた時点で前の個体対は解消される
   個体対はどこに記録する？
    各個体?
    各個体群?
  交叉
   複数の交叉アルゴリズムを乱択して新個体を生成する
   利用するアルゴリズムは...?
   交叉回数を乱択
    少ないほど高確率
    使用するアルゴリズムを交叉回数だけ乱択して適用
    各アルゴリズムの確率は一定
  突然変異
   低確率で発生
   複数の突然変異アルゴリズムから1つを乱択
   変異させる遺伝子の数nも乱択(0が発生しない)
   nが大きくなるほど低確率
 病気
  1gen毎にある複数の個体を病気にさせる
  選ぶ個体の数も選ぶ個体もランダム
  適応度や寿命など関係なくそれぞれに等しい確率
  具体的には寿命を減らす
  どれくらい減らすかもランダム
  減らす数は?
 突然死
  1gen毎に超低確率で個体が消滅する


個体群
 個体の集合，全個体の部分集合
 各群は群番号を持つ
 群番号
  各個体群には群番号を割り振る
   -> これが画面上のどのドットに対応するかを決定する
  群番号はランダムに与える
   -> ただし分離の際は発生元の群と発生先の群は近い場所にする
 全個体群数はGUIに制約を受ける
 全個体群数
  全個体群の数はGUIのドットの数に制約を受ける
  群の数に応じて群の発生や合成の確率を変えるなど
 各群は適応度パラメータを持つ
  その群に属する個体の適応度の最大値または平均値をパラメータとする
 各群にはリソースが割り当てられる
 各個体群は属する個体のリストを持つ
 リソース
  実質，全個体数を決定づけるもの
  リソースがない群は消滅する
  各群は1genごとに個体数に応じたリソースを消費する
  各群は1genごとにその群の適応度パラメータによってリソースを得る
  全リソースは一定
 各群におけるリソースの初期値
  初期個体群における適応度パラメータと個体数によって確率的に決定
 流行病
  1gen毎に低確率で1つの群の大半を病気にかからせる
 大量絶滅
  1gen毎に天文学的低確率で1つの群の大半が消滅する
 個体群の合成
  隣り合う個体群同士は低確率でくっつく
   個体数が少ない群ほど発生率が上昇
  合成後，群番号を1つに統一する
  片方の群に属してた個体をもう片方の群に全て移動する
  1gen毎に合成が起こるかを乱択して起こる群も乱択
  リソースも合成される
   リソースの値に応じて合成発生率が変動
 個体群の分離
  個体群がオス2メス2個体以上になると起こりうる
  個体群から適当な数の個体を切り離し新たな群番号を与える
  個体数が多い群ほど発生率が上昇
  切り離す個体の選択には...?
  1gen毎に起こるかを乱択して起こる群も乱択
  リソースも分離する
   リソースの値に応じて分離発生率が変動
 個体の群間移動
  低確率である個体をその群から別の群に移動させる
  発生に関わるパラメータは？

最大適応度個体の記録
 各genごとに適応度最大の個体の情報を記録する
  染色体
  表現型(ナップザックであればweightとprice)
 記録したものはGUIに表示
 初期個体をまず記録
 その後は個体が発生するごとに記録

負荷対策
 負荷を下げるために1genごとに1secくらいのスリープを入れる？

効率化対策
 データベースを用いてリストの参照を高速化するなど?

神の手
 一点をクリックするとそのドットの群を消滅させられるとか
 グラフィックに対してエフェクトかけられると面白いかも
 restart, stopボタンなど

Another
LionGA
群は1体のオスと数体のメスで構成
適応度が高いオスが生まれるとすでにいた群れのオスは他の群れのオスと比較される
メスは適応度が高い順に交配出来る確率が高い
全てのメスが交配出来る訳ではない
